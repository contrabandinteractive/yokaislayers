/**
 * Kiro Hook: Auto-generate type-safe Redis key helpers
 * Runs whenever Redis operations are detected in code
 */

module.exports = {
  name: 'redis-keys',
  trigger: 'on-save',
  pattern: /redis\.(get|set|zadd)/,
  
  async execute(context) {
    const redisOps = context.findAll(/redis\.(get|set)\(['"]([^'"]+)['"]/g);
    
    // Extract all Redis keys
    const keys = new Set();
    for (const match of redisOps) {
      keys.add(match[2]);
    }
    
    // Generate helper file
    const helpers = generateRedisHelpers(Array.from(keys));
    
    await context.writeFile('src/app/utils/redisKeys.ts', helpers);
    console.log(`âœ“ Generated Redis key helpers for ${keys.size} keys`);
  }
};

function generateRedisHelpers(keys) {
  return `
/**
 * Type-safe Redis key generators
 * Auto-generated by Kiro hook
 */

export const RedisKeys = {
  player: (userId: string) => \`player:\${userId}\`,
  boss: (date: string) => \`boss:\${date}\`,
  leaderboard: (date: string) => \`leaderboard:\${date}\`,
  combatLog: (battleId: string) => \`combatLog:\${battleId}\`
} as const;

export type RedisKeyType = keyof typeof RedisKeys;
`;
}